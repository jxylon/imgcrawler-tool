# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'filter_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import re
import shutil

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap, QIcon
from PyQt5.QtWidgets import QMainWindow, QFileDialog, QListWidgetItem, QMessageBox


class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.isopen = False
        self.root_path = os.path.abspath('./')
        self.cur_path = './'
        self.imglist = []

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1600, 1000)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_img = QtWidgets.QLabel(self.centralwidget)
        self.label_img.setObjectName("label_img")
        self.verticalLayout.addWidget(self.label_img, 0, QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        self.pushButton_prev = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_prev.setObjectName("pushButton_prev")
        self.pushButton_prev.clicked.connect(lambda: self.on_clickitem(-1))
        self.pushButton_prev.setFont(font)
        self.pushButton_prev.setIcon(QIcon(QPixmap(self.root_path + '/resources/icons/prev.png')))
        self.horizontalLayout.addWidget(self.pushButton_prev)
        self.pushButton_del = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_del.setObjectName("pushButton_del")
        self.pushButton_del.setStyleSheet("background-color:red;color:white")
        self.pushButton_del.clicked.connect(self.ont_filter)
        self.pushButton_del.setFont(font)
        self.pushButton_del.setIcon(QIcon(QPixmap(self.root_path + '/resources/icons/cancel.png')))
        self.horizontalLayout.addWidget(self.pushButton_del)
        self.pushButton_next = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_next.setObjectName("pushButton_next")
        self.pushButton_next.clicked.connect(lambda: self.on_clickitem(1))
        self.pushButton_next.setFont(font)
        self.pushButton_next.setIcon(QIcon(QPixmap(self.root_path + '/resources/icons/next.png')))
        self.horizontalLayout.addWidget(self.pushButton_next)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.verticalLayout.setStretch(0, 20)
        self.verticalLayout.setStretch(1, 1)
        self.verticalLayout.setStretch(2, 1)
        self.horizontalLayout_2.addLayout(self.verticalLayout)
        self.listview_file = QtWidgets.QListWidget(self.centralwidget)
        self.listview_file.setObjectName("listview_file")
        self.listview_file.itemDoubleClicked.connect(lambda: self.on_clickitem(0))
        self.horizontalLayout_2.addWidget(self.listview_file)
        self.horizontalLayout_2.setStretch(0, 10)
        self.horizontalLayout_2.setStretch(1, 3)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1600, 21))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.action_openfile = QtWidgets.QAction(MainWindow)
        self.action_openfile.setObjectName("action_openfile")
        self.action_openfile.setShortcut('Ctrl+O')
        self.action_openfile.triggered.connect(self.open_file)
        self.menu.addAction(self.action_openfile)
        self.menubar.addAction(self.menu.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "人工审核 "))
        self.label_img.setText(_translate("MainWindow", ""))
        self.pushButton_prev.setText(_translate("MainWindow", "上一张"))
        self.pushButton_del.setText(_translate("MainWindow", "删除"))
        self.pushButton_next.setText(_translate("MainWindow", "下一张"))
        self.menu.setTitle(_translate("MainWindow", "功能"))
        self.action_openfile.setText(_translate("MainWindow", "打开文件夹"))

    # 功能函数
    def open_file(self):
        """
        更改存储路径

        """
        filename = QFileDialog.getExistingDirectory(caption='更改存储路径', directory=self.cur_path)
        self.isopen = False
        if filename:
            self.cur_path = filename + '/'
            self.isopen = True
            self.imglist = os.listdir(self.cur_path)
            self.imglist.sort(key=self.sort_key)
            for img in self.imglist:
                item = QListWidgetItem(os.path.join(self.cur_path, img))
                self.listview_file.addItem(item)

    def load_file(self):
        self.imglist = os.listdir(self.cur_path)
        self.imglist.sort(key=self.sort_key)
        self.listview_file.clear()
        for img in self.imglist:
            item = QListWidgetItem(os.path.join(self.cur_path, img))
            self.listview_file.addItem(item)

    def on_clickitem(self, pattern):
        _translate = QtCore.QCoreApplication.translate
        idx = self.listview_file.currentIndex().row()
        if pattern > 0:
            idx += 1
            self.listview_file.setCurrentRow(idx)
        elif pattern < 0:
            idx -= 1
            self.listview_file.setCurrentRow(idx)
        img_path = os.path.join(self.cur_path, self.imglist[idx])
        self.setWindowTitle(_translate("MainWindow", "人工审核 " + img_path))
        img = QPixmap(img_path)
        self.label_img.setPixmap(img)
        if idx == 0:
            self.pushButton_prev.setDisabled(True)
            self.pushButton_next.setDisabled(False)
        elif idx == len(self.imglist) - 1:
            self.pushButton_prev.setDisabled(False)
            self.pushButton_next.setDisabled(True)
        else:
            self.pushButton_prev.setDisabled(False)
            self.pushButton_next.setDisabled(False)
        # 每次双击都会重新加载该目录中的文件，文件太多可能会造成卡顿
        # self.load_file()

    def sort_key(self, s):
        # 排序关键字匹配
        if s:
            try:
                c = re.findall('\d+', s)[0]
            except Exception:
                c = -1
            return int(c)

    def ont_filter(self):
        idx = self.listview_file.currentIndex().row()
        img_path = os.path.join(self.cur_path, self.imglist[idx])
        ans = QMessageBox.question(self, "确认", "确认删除？", QMessageBox.Yes | QMessageBox.No)
        if ans:
            try:
                shutil.move(img_path, os.path.join(self.root_path, 'recyclebin'))
            except shutil.Error:
                os.remove(img_path)
        # 删除完重新加载该目录中的文件，文件太多可能会造成卡顿
        self.load_file()
